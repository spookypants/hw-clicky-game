{"version":3,"sources":["img/agent.jpg","img/art.jpg","img/boy.jpg","img/foxy.jpg","img/lego.jpg","img/mock.jpg","img/older.jpg","img/oops.jpg","img/phone.jpg","img/simpsons.jpg","img/thoughtful.jpg","img/toy.jpg","components/Navbar/Navbar.js","components/Banner/Banner.js","components/Character/Character.js","components/Container/Container.js","images.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","react_default","a","createElement","className","navMsg","navMessage","score","highScore","Banner","Character","onClick","e","clickEvent","target","src","name","alt","Container","characters","map","i","components_Character_Character","key","images","agent","art","boy","foxy","lego","mock","older","oops","phone","simpsons","thoughtful","toy","App","state","allCharacters","_this","shuffleArray","wasClicked","checkClicked","bind","Object","assertThisInitialized","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElement","_this2","this","prevState","shuffled","includes","setState","setTimeout","components_Navbar_Navbar","components_Banner_Banner","components_Container_Container","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+RCazBC,SAVA,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMK,QAASL,EAAMM,YACrCL,EAAAC,EAAAC,cAAA,qBACYH,EAAMO,MADlB,IACyBN,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,KADzB,gBACsEJ,EAAMQ,cCErEC,SAPA,kBACXR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAA,4FCGOO,eANG,SAAAV,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOO,QAAS,SAAAC,GAAC,OAAIZ,EAAMa,WAAWD,EAAEE,OAAOC,OAC1Dd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BW,IAAKf,EAAMgB,KAAMC,IAAI,QCKxDC,EANG,SAAAlB,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVJ,EAAMmB,WAAWC,IAAI,SAAClB,EAAGmB,GAAJ,OAAUpB,EAAAC,EAAAC,cAACmB,EAAD,CAAWN,KAAMd,EAAGqB,IAAKF,EAAGR,WAAYb,EAAMa,0NCsBvEW,EAfA,CACXC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KC0EWC,6MA5FbC,MAAQ,CACN/B,MAAO,EACPC,UAAW,EAGXH,OAAQ,GAGRC,WAAY,6CAEZiC,cAAeC,EAAKC,eAGpBC,WAAY,MAGd7B,WAAa2B,EAAKG,aAAaC,KAAlBC,OAAAC,EAAA,EAAAD,CAAAL,kFASX,IAJA,IAAMO,EAASvB,EAAOwB,QAEhBC,EAAa,GAEZF,EAAOG,OAAS,GACrBD,EAAWE,KAAKJ,EAAOK,OAAOC,KAAKC,MAAMD,KAAKE,SAAWR,EAAOG,QAAS,GAAG,IAE9E,OAAOD,uCAGIO,GAAgB,IAAAC,EAAAC,KACrBC,EAAYD,KAAKpB,MAAMI,WAAWM,QAClCY,EAAWF,KAAKjB,eAGlBlC,EAAQmD,KAAKpB,MAAM/B,MACnBC,EAAYkD,KAAKpB,MAAM9B,UAa3B,GAVKkD,KAAKpB,MAAMI,WAAWmB,SAASL,KAC/BjD,IAAUC,GACXD,IACAC,KAEAD,IAEFoD,EAAUR,KAAKK,IAGbE,KAAKpB,MAAMI,WAAWmB,SAASL,GAAiB,CAElD,OAAOE,KAAKI,SAAS,CACnBvD,MAFU,EAGVC,UAAWA,EACXH,OAAQ,YACRC,WAAY,mCACZiC,cAAeqB,EACflB,WAAY,KAYd,OARFgB,KAAKI,SAAS,CACZvD,MAAOA,EACPC,UAAWA,EACXH,OAAQ,UACRC,WAAY,yCACZiC,cAAeqB,EACflB,WAAYiB,IAELI,WAAW,kBAAMN,EAAKK,SAAS,CAAEzD,OAAQ,MAAO,sCAGvD,IAAMiC,EAAQoB,KAAKpB,MACnB,OACErC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6D,EAAD,CACEzD,MAAO+B,EAAM/B,MACbC,UAAW8B,EAAM9B,UACjBF,WAAYgC,EAAMhC,WAClBD,OAAQiC,EAAMjC,SAEhBJ,EAAAC,EAAAC,cAAC8D,EAAD,MACAhE,EAAAC,EAAAC,cAAC+D,EAAD,CACE/C,WAAYmB,EAAMC,cAClB1B,WAAY6C,KAAK7C,qBAtFXsD,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7aa048ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/agent.a50585ad.jpg\";","module.exports = __webpack_public_path__ + \"static/media/art.ca6bd812.jpg\";","module.exports = __webpack_public_path__ + \"static/media/boy.0481c054.jpg\";","module.exports = __webpack_public_path__ + \"static/media/foxy.6ced12bb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lego.d5920168.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mock.b04c0c10.jpg\";","module.exports = __webpack_public_path__ + \"static/media/older.7e85e71d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/oops.e19e8515.jpg\";","module.exports = __webpack_public_path__ + \"static/media/phone.6b1f0ce6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/simpsons.82e231bf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thoughtful.5bd1e0d4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/toy.01540d2f.jpg\";","import React from 'react';\r\nimport './Navbar.css';\r\n\r\nconst Navbar = props => (\r\n    <div className=\"navbar\">\r\n        <div>MIND/MULDER</div>\r\n        <div className={props.navMsg}>{props.navMessage}</div>\r\n        <div>\r\n            Score: {props.score} <span className=\"pipe\">|</span> High Score: {props.highScore}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './Banner.css';\r\n\r\nconst Banner = () => (\r\n    <div className=\"banner\">\r\n        <p>Click every Mulder once to win.</p>\r\n        <p>Click a Mulder twice and you find out the Cigarette Smoking Man is your dad!</p>\r\n    </div>\r\n);\r\n\r\nexport default Banner;","import React from 'react';\r\nimport './Character.css';\r\n\r\nconst Character = props => (\r\n    <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\r\n        <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\r\n    </div>\r\n);\r\n\r\nexport default Character;","import React from 'react';\r\nimport './Container.css';\r\nimport Character from '../Character';\r\n\r\nconst Container = props => (\r\n    <div className='container'>\r\n        {props.characters.map((a, i) => <Character name={a} key={i} clickEvent={props.clickEvent} />)}\r\n    </div>\r\n);\r\n\r\nexport default Container;","import agent from './img/agent.jpg';\r\nimport art from './img/art.jpg';\r\nimport boy from './img/boy.jpg';\r\nimport foxy from './img/foxy.jpg';\r\nimport lego from './img/lego.jpg';\r\nimport mock from './img/mock.jpg';\r\nimport older from './img/older.jpg';\r\nimport oops from './img/oops.jpg';\r\nimport phone from './img/phone.jpg';\r\nimport simpsons from './img/simpsons.jpg';\r\nimport thoughtful from './img/thoughtful.jpg';\r\nimport toy from './img/toy.jpg';\r\n\r\nconst images = [\r\n    agent,\r\n    art,\r\n    boy,\r\n    foxy,\r\n    lego,\r\n    mock,\r\n    older,\r\n    oops,\r\n    phone,\r\n    simpsons,\r\n    thoughtful,\r\n    toy\r\n];\r\n\r\nexport default images;","import React, {Component} from 'react';\nimport Navbar from './Navbar';\nimport Banner from './Banner';\nimport Container from './Container';\nimport images from '../images';\n\nclass App extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    // for assigning class to navMessage based on success/failure\n    navMsg: '',\n\n    // for player feedback (welcome, success, failure)\n    navMessage: 'Mulder is out there... Click one to begin!',\n\n    allCharacters: this.shuffleArray(),\n\n    // for tracking clicked elements\n    wasClicked: [],\n  };\n\n  clickEvent = this.checkClicked.bind(this);\n\n  // for shuffling images on load + on click\n  shuffleArray() {\n    // for new array of characters\n    const newArr = images.slice();\n    // for storing shuffled array\n    const shuffleArr = [];\n\n    while (newArr.length > 0) {\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    }\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElement) {\n    const prevState = this.state.wasClicked.slice();\n    const shuffled = this.shuffleArray();\n\n    // for tracking score\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    // if clicked element was not clicked, increase score\n    if (!this.state.wasClicked.includes(clickedElement)) {\n      if(score === highScore) {\n        score++;\n        highScore++;\n      } else {\n        score++;\n      }\n      prevState.push(clickedElement);\n    }\n\n    if (this.state.wasClicked.includes(clickedElement)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsg: 'incorrect',\n        navMessage: 'Wrong! The truth is out there...',\n        allCharacters: shuffled,\n        wasClicked: [],\n      });\n    }\n\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsg: 'correct',\n      navMessage: 'Correct! We want to believe... in you!',\n      allCharacters: shuffled,\n      wasClicked: prevState,\n    });\n      return setTimeout(() => this.setState({ navMsg: '' }), 500);\n    }\n    render() {\n      const state = this.state;\n      return (\n        <div>\n          <Navbar\n            score={state.score}\n            highScore={state.highScore}\n            navMessage={state.navMessage}\n            navMsg={state.navMsg}\n          />\n          <Banner />\n          <Container\n            characters={state.allCharacters}\n            clickEvent={this.clickEvent}\n          />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}